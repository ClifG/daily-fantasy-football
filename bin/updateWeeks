#!/usr/bin/env node

var secrets = require('../config/secrets');
var mongoose = require('mongoose');
var request = require('request');
var nodemailer = require('nodemailer');
var moment = require('moment');

var Week = require('../models/week');
var Player = require('../models/player');
var async = require('async');

mongoose.connect(secrets.db);

var asyncTasks = [];

var emailBuffer = '###################### updateWeeks output\n';
var weekStateChanged = false;
var statsError = false;
var statsUpdated = false;

var playerStatsUri = 'http://www70.myfantasyleague.com/2016/export?TYPE=playerScores&L=34227&W='
var playerListUri = 'http://www56.myfantasyleague.com/2016/export?TYPE=players&JSON=1'

function log(entry) {
    emailBuffer += entry + '\n';
    console.log(entry);
};

function updateLockAndEnd(callback) {
    Week.find( { state: { $in: ['open', 'locked'] }}, function(err, weeks) {
        if (err) {
            log(' ! Error getting weeks!');
            return callback();
        }

        var today = new Date();
        log('About to process ' + weeks.length + ' weeks...');
        log('Today: ' + today);

        async.forEach(weeks, function(week, itrCallback) {
            var dirty = false;

            log(' - Processing week number ' + week.weekNumber);
            log('   State     :' + week.state);
            log('   LockDate  :' + week.weekLockDate);
            log('   EndDate   :' + week.weekEndDate);

            if (week.weekEndDate < today) {
                // End date has passed, so close the week
                log('   *** Updating state to completed');
                week.state = 'completed';
                dirty = true;
            } else if ((week.weekLockDate < today) && (week.state === 'open')) {
                log('   *** Updating state to locked');
                week.state = 'locked';
                dirty = true;
            } else if ((week.weekLockDate > today) && (week.state === 'locked')) {
                // TODO: This shouldn't happen "in production" so maybe send an email to admins
                // when this happens?
                log('   *** Updating state to open');
                week.state = 'open';
                dirty = true;
            }

            if (dirty) {
                weekStateChanged = true;

                // We updated the week so save it
                week.save(function(err) {
                    if (err) {
                        log('   *** error saving week: ' + err.data);
                    } else {
                        log('   *** done!');
                    }

                    itrCallback();
                })
            } else {
                itrCallback();
            }
        }, function(err) {
            log('Finished processing all weeks...');
            callback();
        });
    });
}

// Annoying list of names that don't match between our database and the scores database
var scoreNameMap = {
    'Beckham Jr., Odell': 'Beckham, Odell',
    'Watson, Benjamin': 'Watson, Ben',
    'McCarron, AJ': 'McCarron, A.J.',
    'Vick, Mike': 'Vick, Michael',
    'Manuel, EJ': 'Manuel, E.J.',
    'Johnson Jr., Duke': 'Johnson, Duke',
    'Shorts III, Cecil': 'Shorts, Cecil',
    'Herron, Daniel': 'Herron, Dan',
    'Slater, Matthew': 'Slater, Matt',
    'Dixon, Boobie': 'Dixon, Anthony',
    'Hammond Jr., Frankie': 'Hammond, Frankie',
    'Jones, TJ': 'Jones, T.J.',
    'Bellamy, Joshua': 'Bellamy, Josh',
    'Housler, Rob': 'Housler, Robert',
    'Helu Jr., Roy': 'Helu, Roy',
    'Powell, Walt': 'Powell, Walter'
};

// Annoying list of team abbreviations that don't match between our database and the scores database
var teamNameMap = {
    'KC': 'KCC',
    'NE': 'NEP',
    'TB': 'TBB',
    'GB': 'GBP',
    'SF': 'SFO',
    'JAX': 'JAC',
    'NO': 'NOS',
    'SD': 'SDC',
    'LA': 'RAM'
};

// Annoying list of position abbreviations that don't match between out database and the scores database
var positionNameMap = {
    'DST': 'Def'
};

function processStats(callback) {
    log('\nProcessing locked and closed weeks, looking for stats...');
    // Walk through each week in the 'locked' or 'completed' state and try to download stats. If we can, we'll move
    // it to the 'closed' state.
    Week.find({ state: { $in: ['locked', 'completed'] } })
        .populate('players.player')
        .select('-players.stats')
        .exec(function(err, weeks) {
        if (err) {
            log(' ! Error getting locked and completed weeks!');
            return callback();
        }

        if (weeks.length == 0) {
            log('No weeks to update...');
            return callback();
        }

        request(playerListUri, function(err, res, body) {
            if (err) {
                log(' ! Error downloding player list!');
                return callback();
            }

            var playerData = JSON.parse(body);

            async.forEach(weeks, function(week, itrCallback) {
                log('Week ' + week.weekNumber + ' is ' + week.state + '...');
                var uri = playerStatsUri + week.weekNumber + '&JSON=1';
                request(uri, function(err, res, scores) {
                    if (err) {
                        log(' ! Error fetching stats for week ' + week.weekNumber);
                        return itrCallback();
                    }

                    var scoreData = JSON.parse(scores);

                    // For each player in our weekly database, find that player in the players object to get the id, then
                    // find that id in the scores object to get the score and write it back to our database.
                    var matchedPlayers = [];
                    var unmatchedPlayers = [];
                    var missingScores = [];

                    for (var i = 0; i < week.players.length; i++) {
                        var dbPlayer = week.players[i];

                        var searchString = (dbPlayer.player.position === 'DST') ? 
                            dbPlayer.player.firstName : 
                            dbPlayer.player.lastName + ', ' + dbPlayer.player.firstName;

                        if (scoreNameMap[searchString]) {
                            searchString = scoreNameMap[searchString];
                        }

                        var team = dbPlayer.player.team;

                        if (teamNameMap[team]) {
                            team = teamNameMap[team];
                        }

                        var position = dbPlayer.player.position;
                        if (positionNameMap[position]) {
                            position = positionNameMap[position];
                        }

                        var foundName = false;
                        var foundScore = false;

                        for (var j = 0; j < playerData.players.player.length; j++) {
                            if ((team === playerData.players.player[j].team) &&
                                (position === playerData.players.player[j].position) &&
                                (((dbPlayer.player.position === 'DST') && (playerData.players.player[j].name.split(',')[0]) ||
                                (playerData.players.player[j].name === searchString)))) {

                                matchedPlayers.push(searchString);
                                foundName = true;

                                for (var k = 0; k < scoreData.playerScores.playerScore.length; k++) {
                                    if (scoreData.playerScores.playerScore[k].id === playerData.players.player[j].id) {
                                        foundScore = true;

                                        if (dbPlayer.scoreOverride != scoreData.playerScores.playerScore[k].score) {
                                            dbPlayer.scoreOverride = scoreData.playerScores.playerScore[k].score;
                                            statsUpdated = true;
                                        }

                                        break;
                                    }
                                }

                                break;
                            }
                        }

                        if (!foundName) {
                            unmatchedPlayers.push(searchString);
                        }

                        if (!foundScore) {
                            missingScores.push(searchString);
                        }
                    }

                    if (!statsUpdated) {
                        log('No stats updated, bailing out');
                        itrCallback();
                    }

                    log('Matched: ' + matchedPlayers.length);
                    log('Unmatched: ' + unmatchedPlayers.length);

                    for (var i = 0; i < unmatchedPlayers.length; i++) {
                        log('   ' + unmatchedPlayers[i]);
                    }

                    log('Missing Scores: ' + missingScores.length);

                    for (var i = 0; i < missingScores.length; i++) {
                        log('   ' + missingScores[i]);
                    }

                    week.save(function(err) {
                        if (err) {
                            log(' ! Error saving score data for week ' + week.weekNumber);
                        } else {
                            log('Saved score data for week ' + week.weekNumber);

                            if (week.state === 'completed') {
                                log('Setting week state to closed...');
                                week.state = 'closed';

                                week.save(function(err) {
                                    if (err) {
                                        log(' ! Error closing week ' + week.weekNumber);
                                    } else {
                                        log('Closed week ' + week.weekNumber);
                                    }

                                    return itrCallback();
                                });
                            } else {
                                itrCallback();
                            }
                        }
                    });
                });
            }, function(err) {
                if (err) {
                    statsError = true;
                }

                log('Finished processing weekly stats...');
                callback();
            });

            
        });

    }, function(err) {
        log('Failed processing closed weeks...');
    });
}

function sendEmail(callback) {
    if (!weekStateChanged && !statsError && !statsUpdated) {
        console.log('No week state change, no errors, and no updated stats, so not sending log buffer email');
        return callback();
    }
    
    var transport = nodemailer.createTransport({
        service: 'gmail',
        auth: {
            user: process.env.DAILYFANTASY_EMAIL_USERNAME,
            pass: process.env.DAILYFANTASY_EMAIL_PASSWORD
        }
    });

    transport.sendMail({
        to: process.env.DAILYFANTASY_ADMIN_EMAIL,
        subject: 'updateWeeks Report - ' + moment().format('MM/DD/YYYY'),
        text: emailBuffer
    }, function(err, info) {
        if (err) {
            console.log(' !!! Error sending email report!');
            console.dir(err);
            return callback();
        }

        console.log('Sent report email to ' + process.env.DAILYFANTASY_ADMIN_EMAIL);
        return callback();
    });
};

async.series([
    function(callback) {
        updateLockAndEnd(callback);
    },
    function(callback) {
        processStats(callback);
    },
    function(callback) {
        sendEmail(callback);
    }
], function() {
    process.exit();
});
